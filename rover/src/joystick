// Python code for PyQt 

import sys
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QVBoxLayout
from PyQt5.QtGui import QPainter, QColor

class Joystick(QWidget):
    def __init__(self):
        super().__init__()
        self.x = 0
        self.y = 0
        
    def paintEvent(self, event):
        painter = QPainter(self)
        painter.setRenderHint(QPainter.Antialiasing)
        
        # Draw joystick
        size = min(self.width(), self.height())
        center = size / 2
        radius = size / 4
        painter.setPen(Qt.black)
        painter.setBrush(Qt.gray)
        painter.drawEllipse(center - radius, center - radius, radius * 2, radius * 2)
        
        # Draw handle
        handle_radius = size / 8
        handle_x = center + self.x * radius / 512
        handle_y = center + self.y * radius / 512
        painter.setPen(Qt.black)
        painter.setBrush(QColor(255, 0, 0))
        painter.drawEllipse(handle_x - handle_radius, handle_y - handle_radius, handle_radius * 2, handle_radius * 2)
        
    def updatePosition(self, x, y):
        self.x = x
        self.y = y
        self.update()

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.joystick = Joystick()
        
        # Set up the main window
        self.setWindowTitle("Joystick")
        self.setCentralWidget(self.joystick)
        
    def keyPressEvent(self, event):
        # Handle arrow key events
        if event.key() == Qt.Key_Up:
            self.joystick.updatePosition(self.joystick.x, self.joystick.y - 10)
        elif event.key() == Qt.Key_Down:
            self.joystick.updatePosition(self.joystick.x, self.joystick.y + 10)
        elif event.key() == Qt.Key_Left:
            self.joystick.updatePosition(self.joystick.x - 10, self.joystick.y)
        elif event.key() == Qt.Key_Right:
            self.joystick.updatePosition(self.joystick.x + 10, self.joystick.y)
            
        event.accept()
        
    def keyReleaseEvent(self, event):
        # Reset joystick position on key release
        self.joystick.updatePosition(0, 0)
        event.accept()

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.setGeometry(100, 100, 400, 400)
    window.show()
    sys.exit(app.exec_())
